<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title>Yuyan Li's blog</title>
        <link>https://yuyanli.dev</link>
        <description>I'm Yuyan Li, a university student and a web developer in Sydney, NSW.</description>
        <language>en</language>
        <lastBuildDate>Mon, 10 Oct 2022 18:56:00 GMT</lastBuildDate>
        <item>
            <title>How I built this blog</title>
            <link>https://blog.yuyanli.dev/how-i-built-this</link>
            <guid>https://blog.yuyanli.dev/how-i-built-this</guid>
            <pubDate>Mon, 10 Oct 2022 18:56:00 GMT</pubDate>
            <description>How I built this blog</description>
            <content type="html" xml:lang="en"><![CDATA[<p>I&#39;ve always wanted to build a blog, a real blog. To me, that means it is fast, static, responsive, in markdown with as few images as possible, and has a full-text RSS feed.</p>
<h3 id="design">Design</h3>
<p>This section is where I pretend that I had a complete design in mind before I actually started building it. But in my defence, having some clear goals is more than enough for a personal project like this.</p>
<p>Firstly, the full text is very important to me, both in the RSS feed and on the actual home page. No &#39;read more&#39; links, no unfold button, and no going to the link to read the full article in the RSS feed. Every post should be displayed on the home page in reverse chronological order. Yet every post should have its own individual page with a human-readable link.</p>
<p>I wanted to use thin, sans-serif fonts with muted theme colors for a modern look. After comparing the design of a few of my favorite personal blogs (none of which are exactly modern):</p>
<ul>
<li><a href="https://daringfireball.net/">Daring Fireball</a></li>
<li><a href="https://marco.org/">Marco.org</a></li>
<li><a href="https://hypercritical.co/">Hypercritical</a></li>
</ul>
<p>I chose Avenir Next used by marco.org for the font. As for the colors,
  the <a href="https://github.com/narcisoyu/moRandi">Morandi color palette</a> is great for reading.</p>
<h3 id="development">Development</h3>
<p>Before this, I&#39;ve heard (seen on YouTube and Reddit) a lot of good things about <a href="https://nextjs.org/">Next.js</a>. React is the framework I&#39;m most familiar with, but the heaviness and inelegance has always bothered me. So many third party packages and so much client side rendering. A site built with React has always felt bloated, or as kids these days call it—a hecking chonker. The dependency hell is hard to avoid, especially when I&#39;m just starting, but the inelegance and heaviness was improved a lot by using Next.js. Despite being built on top of React—then on top of Node and then on top of JavaScript—Next supports server side rendering and most importantly, static site generation, which is perfect for a blog. Not to mention the free deployment provided by the creator of Next, Vercel. It is truly fantastic, just don&#39;t think about how much of the modern digital infrastructure is built in<a href="https://xkcd.com/2347/"> this way</a>.</p>
<p>Jumping right in, search for a blog template on Vercel, clone, build, deploy, and hit the first brick wall. The template uses a very new library called <a href="https://nextra.vercel.app/">Nextra</a>, and its claim of having a blog in 10 minutes is real and spectacular. However, if you want some personality on your documentation or blog, there is no option to customize the completely white templates. Starting over with pure Next proved to be much better. </p>
<p>The rest of the process was very similar to developing with React, but on steroids. No need to worry about routing and pages, as long as you put the <code>.js</code>, <code>.html</code>, even in some cases <code>.md</code> files into the pages directory, it will automatically become a path on the server. The <code>.md</code> part, however, has proven to be the second brick wall. There is already a framework called <code>MDX</code> that allows using markdown files ending in—you guessed it— <code>.mdx</code> as both a markdown files and a <code>.jsx</code> component. However, taking this dream like component out of its context and into other JavaScript files as a component has proven to be a nightmare. Turns out, they were designed to be used as individual pages. Unintuitiveness while writing JavaScript? I know, truly unheard of. Abandoning that idea, the traditional <code>marked</code> library worked with few issues.</p>
<p>The last technical hurdle was actually building the RSS feed, which after trying 3 different methods, just would not work. Turns out the methods were all fine, I was just passing markdown into it instead of HTML, therefore completely breaking the feed. This is one of those situation where you completely understand you&#39;ve died fair and square in Call of Duty but still have to call it bullshit in front of no one.</p>
<h3 id="future-improvements">Future improvements</h3>
<ul>
<li>Dark mode</li>
<li>More markdown syntax support
Which seems pretty difficult without creating my own markdown parsing library, so it will stay a long-term goal. Standard markdown is good enough for almost everything anyway.</li>
<li>Home page render limit. Will build this once there are too many blog posts.</li>
<li>Linking to external websites right in the title, like how Daring Fireball does it.</li>
<li>Automating posting so I don&#39;t have to manually build and deploy everytime.</li>
</ul>
]]></content>
            <dc:creator>Yuyan Li</dc:creator>
        </item>
        <item>
            <title>Markdown style test</title>
            <link>https://blog.yuyanli.dev/Markdown-style-test</link>
            <guid>https://blog.yuyanli.dev/Markdown-style-test</guid>
            <pubDate>Mon, 10 Oct 2022 13:07:00 GMT</pubDate>
            <description>Markdown style test</description>
            <content type="html" xml:lang="en"><![CDATA[<h1 id="h1-heading-8-">h1 Heading 8-)</h1>
<h2 id="h2-heading">h2 Heading</h2>
<h3 id="h3-heading">h3 Heading</h3>
<h4 id="h4-heading">h4 Heading</h4>
<h5 id="h5-heading">h5 Heading</h5>
<h6 id="h6-heading">h6 Heading</h6>
<h2 id="horizontal-rules">Horizontal Rules</h2>
<hr>
<hr>
<hr>
<h2 id="typographic-replacements">Typographic replacements</h2>
<p>Enable typographer option to see result.</p>
<p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>
<p>test.. test... test..... test?..... test!....</p>
<p>!!!!!! ???? ,, -- ---</p>
<p>&quot;Smartypants, double quotes&quot; and &#39;single quotes&#39;</p>
<h2 id="emphasis">Emphasis</h2>
<p><strong>This is bold text</strong></p>
<p><strong>This is bold text</strong></p>
<p><em>This is italic text</em></p>
<p><em>This is italic text</em></p>
<p><del>Strikethrough</del></p>
<h2 id="blockquotes">Blockquotes</h2>
<blockquote>
<p>Blockquotes can also be nested...</p>
<blockquote>
<p>...by using additional greater-than signs right next to each other...</p>
<blockquote>
<p>...or with spaces between arrows.</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="lists">Lists</h2>
<p>Unordered</p>
<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:<ul>
<li><p>Marker character change forces new list start:</p>
<ul>
<li>Ac tristique libero volutpat at</li>
</ul>
<ul>
<li>Facilisis in pretium nisl aliquet</li>
</ul>
<ul>
<li>Nulla volutpat aliquam velit</li>
</ul>
</li>
</ul>
</li>
<li>Very easy!</li>
</ul>
<p>Ordered</p>
<ol>
<li><p>Lorem ipsum dolor sit amet</p>
</li>
<li><p>Consectetur adipiscing elit</p>
</li>
<li><p>Integer molestie lorem at massa</p>
</li>
<li><p>You can use sequential numbers...</p>
</li>
<li><p>...or keep all the numbers as <code>1.</code></p>
</li>
</ol>
<p>Start numbering with offset:</p>
<ol start="57">
<li>foo</li>
<li>bar</li>
</ol>
<h2 id="code">Code</h2>
<p>Inline <code>code</code></p>
<p>Indented code</p>
<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>
<p>Block code &quot;fences&quot;</p>
<pre><code>Sample text here...
</code></pre>
<p>Syntax highlighting</p>
<pre><code class="language-js">var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
</code></pre>
<h2 id="tables">Tables</h2>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody></table>
<p>Right aligned columns</p>
<table>
<thead>
<tr>
<th align="right">Option</th>
<th align="right">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="right">data</td>
<td align="right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td align="right">engine</td>
<td align="right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td align="right">ext</td>
<td align="right">extension to be used for dest files.</td>
</tr>
</tbody></table>
<h2 id="links">Links</h2>
<p><a href="http://dev.nodeca.com">link text</a></p>
<p><a href="http://nodeca.github.io/pica/demo/" title="title text!">link with title</a></p>
<p>Autoconverted link <a href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>
<h2 id="images">Images</h2>
<p><img src="https://octodex.github.com/images/minion.png" alt="Minion">
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat"></p>
<p>Like links, Images also have a footnote style syntax</p>
<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat"></p>
<p>With a reference later in the document defining the URL location:</p>
<h2 id="plugins">Plugins</h2>
<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin">syntax plugins</a>.</p>
<h3 id="emojies"><a href="https://github.com/markdown-it/markdown-it-emoji">Emojies</a></h3>
<blockquote>
<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>
<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>
</blockquote>
<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output">how to change output</a> with twemoji.</p>
<h3 id="subscript--superscript"><a href="https://github.com/markdown-it/markdown-it-sub">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup">Superscript</a></h3>
<ul>
<li>19^th^</li>
<li>H<del>2</del>O</li>
</ul>
<h3 id="ins"><a href="https://github.com/markdown-it/markdown-it-ins">&lt;ins&gt;</a></h3>
<p>++Inserted text++</p>
<h3 id="mark"><a href="https://github.com/markdown-it/markdown-it-mark">&lt;mark&gt;</a></h3>
<p>==Marked text==</p>
<h3 id="footnotes"><a href="https://github.com/markdown-it/markdown-it-footnote">Footnotes</a></h3>
<p>Footnote 1 link[^first].</p>
<p>Footnote 2 link[^second].</p>
<p>Inline footnote^[Text of inline footnote] definition.</p>
<p>Duplicated footnote reference[^second].</p>
<p>[^first]: Footnote <strong>can have markup</strong></p>
<pre><code>and multiple paragraphs.
</code></pre>
<p>[^second]: Footnote text.</p>
<h3 id="definition-lists"><a href="https://github.com/markdown-it/markdown-it-deflist">Definition lists</a></h3>
<p>Term 1</p>
<p>:   Definition 1
with lazy continuation.</p>
<p>Term 2 with <em>inline markup</em></p>
<p>:   Definition 2</p>
<pre><code>    { some code, part of Definition 2 }

Third paragraph of definition 2.
</code></pre>
<p><em>Compact style:</em></p>
<p>Term 1
~ Definition 1</p>
<p>Term 2
~ Definition 2a
~ Definition 2b</p>
<h3 id="abbreviations"><a href="https://github.com/markdown-it/markdown-it-abbr">Abbreviations</a></h3>
<p>This is HTML abbreviation example.</p>
<p>It converts &quot;HTML&quot;, but keep intact partial entries like &quot;xxxHTMLyyy&quot; and so on.</p>
<p>*[HTML]: Hyper Text Markup Language</p>
<h3 id="custom-containers"><a href="https://github.com/markdown-it/markdown-it-container">Custom containers</a></h3>
<p>::: warning
<em>here be dragons</em>
:::</p>
]]></content>
            <dc:creator>Yuyan Li</dc:creator>
        </item>
        
    </channel>
  </rss>